% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/keras.R, R/write-plumber.R
\name{vetiver_python_requirements.keras.engine.training.Model}
\alias{vetiver_python_requirements.keras.engine.training.Model}
\alias{vetiver_write_plumber}
\alias{vetiver_python_requirements}
\alias{vetiver_python_requirements.default}
\title{Write a deployable Plumber file for a vetiver model}
\usage{
\method{vetiver_python_requirements}{keras.engine.training.Model}(model)

vetiver_write_plumber(
  board,
  name,
  version = NULL,
  ...,
  file = "plumber.R",
  rsconnect = TRUE
)

vetiver_python_requirements(model)

\method{vetiver_python_requirements}{default}(model)
}
\arguments{
\item{model}{A trained model, such as an \code{lm()} model or a tidymodels
\code{\link[workflows:workflow]{workflows::workflow()}}.}

\item{board}{A pin board, created by \code{\link[pins:board_folder]{board_folder()}}, \code{\link[pins:board_connect]{board_connect()}},
\code{\link[pins:board_url]{board_url()}} or another \code{board_} function.}

\item{name}{Pin name.}

\item{version}{Retrieve a specific version of a pin. Use \code{\link[pins:pin_versions]{pin_versions()}} to
find out which versions are available and when they were created.}

\item{...}{Other arguments passed to \code{\link[=vetiver_api]{vetiver_api()}} such as the endpoint
\code{path} or prediction \code{type}.}

\item{file}{A path to write the Plumber file. Defaults to \code{plumber.R} in the
working directory. See \code{\link[plumber:plumb]{plumber::plumb()}} for naming precedence rules.}

\item{rsconnect}{Create a Plumber file with features needed for \href{https://posit.co/products/enterprise/connect/}{RStudio Connect}? Defaults to \code{TRUE}.}
}
\value{
The content of the \code{plumber.R} file, invisibly.
}
\description{
Use \code{vetiver_write_plumber()} to create a \code{plumber.R} file for a
\code{\link[=vetiver_model]{vetiver_model()}} that has been versioned and stored via
\code{\link[=vetiver_pin_write]{vetiver_pin_write()}}.
}
\details{
By default, this function will find and use the latest version of your
vetiver model; the model API (when deployed) will be linked to that specific
version. You can override this default behavior by choosing a specific
\code{version}.

This function uses \code{vetiver_python_requirements()} internally to create a
minimal Python \code{requirements.txt} for models that need it.
}
\examples{
\dontshow{if (rlang::is_installed("plumber")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
library(pins)
tmp <- tempfile()
b <- board_temp(versioned = TRUE)
cars_lm <- lm(mpg ~ ., data = mtcars)
v <- vetiver_model(cars_lm, "cars_linear")
vetiver_pin_write(b, v)

vetiver_write_plumber(b, "cars_linear", file = tmp)
\dontshow{\}) # examplesIf}
}
